
#
# +-----------------------------------------------------------------+ #
# |                            BO3 object                           | #
# +-----------------------------------------------------------------+ #
#

# This is the config file of a custom object.
# If you add this object correctly to your BiomeConfigs, it will spawn in the world.

# This is the creator of this BO3 object
Author: LordSmellyPants

# A short description of this BO3 object
Description: Converted version of the BO2 FloatingIsland7

# The BO3 version, don't change this! It can be used by external applications to do a version check.
Version: 3

# The settings mode, WriteAll, WriteWithoutComments or WriteDisable. See WorldConfig.
SettingsMode: WriteDisable


#
# +-----------------------------------------------------------------+ #
# |                          Main settings                          | #
# +-----------------------------------------------------------------+ #
#

# This needs to be set to true to spawn the object in the Tree and Sapling resources.
Tree: false

# The frequency of the BO3 from 1 to 200. Tries this many times to spawn this BO3 when using the CustomObject(...) resource.

Frequency: 1

# The rarity of the BO3 from 0 to 100. Each spawn attempt has rarity% chance to succeed when using the CustomObject(...) resource.

Rarity: 3.0

# If you set this to true, the BO3 will be placed with a random rotation.
RotateRandomly: true

# The spawn height of the BO3 - randomY, highestBlock or highestSolidBlock.
SpawnHeight: randomY

# The height limits for the BO3.
MinHeight: 150

MaxHeight: 190

# Objects can have other objects attacthed to it: branches. Branches can also
# have branches attached to it, which can also have branches, etc. This is the
# maximum branch depth for this objects.
MaxBranchDepth: 10

# When spawned with the UseWorld keyword, this BO3 should NOT spawn in the following biomes.
# If you writer.write the BO3 name directly in the BiomeConfigs, this will be ignored.
ExcludedBiomes: 


#
# +-----------------------------------------------------------------+ #
# |                      Source block settings                      | #
# +-----------------------------------------------------------------+ #
#

# The B(s) the BO3 should spawn in.
SourceBlocks: AIR,WATER

# The maximum percentage of the BO3 that can be outside the SourceBlock.
# The BO3 won't be placed on a location with more blocks outside the SourceBlock than this percentage.
MaxPercentageOutsideSourceBlock: 0

# What to do when a block is about to be placed outside the SourceBlock? (dontPlace, placeAnyway)
OutsideSourceBlock: placeAnyway


#
# +-----------------------------------------------------------------+ #
# |                              Blocks                             | #
# +-----------------------------------------------------------------+ #
#

# All the blocks used in the BO3 are listed here. Possible blocks:
# B(x,y,z,id[.data][,nbtfile.nbt)
# RB(x,y,z,id[:data][,nbtfile.nbt],chance[,id[:data][,nbtfile.nbt],chance[,...]])
# So RB(0,0,0,CHEST,chest.nbt,50,CHEST,anotherchest.nbt,100) will spawn a chest at
# the BO3 origin, and give it a 50% chance to have the contents of chest.nbt, or, if that
# fails, a 100% percent chance to have the contents of anotherchest.nbt.
B(1,8,-4,AIR)
B(1,6,-4,AIR)
B(1,7,-4,AIR)
B(1,4,-4,AIR)
B(2,4,2,GRASS)
B(1,5,-4,AIR)
B(-3,10,-2,AIR)
B(-1,10,1,AIR)
B(-1,5,0,CONCRETE:15)
B(-1,4,-3,GRASS)
B(-1,4,0,CONCRETE:15)
B(-1,3,-3,CONCRETE:15)
B(-1,7,0,AIR)
B(-1,6,0,GRASS)
B(-1,9,0,Leaves:7)
B(-1,8,0,Leaves:7)
B(2,2,1,CONCRETE:15)
B(2,4,1,GRASS)
B(2,3,1,CONCRETE:15)
B(-1,9,-3,Leaves:7)
B(-1,8,-3,Leaves:7)
B(-3,3,-2,CONCRETE:15)
B(-3,4,-2,GRASS)
B(-3,8,-2,Leaves:7)
B(-3,9,-2,Leaves:7)
B(-1,1,0,CONCRETE:15)
B(-1,0,0,CONCRETE:15)
B(-1,3,0,CONCRETE:15)
B(-1,2,0,CONCRETE:15)
B(0,5,-1,CONCRETE:15)
B(0,4,-1,CONCRETE:15)
B(0,7,-1,AIR)
B(0,6,-1,GRASS)
B(0,9,-1,Leaves:7)
B(0,8,-1,Leaves:7)
B(0,1,-1,CONCRETE:15)
B(0,3,-1,CONCRETE:15)
B(0,2,-1,CONCRETE:15)
B(1,8,-3,Leaves:7)
B(1,4,-3,GRASS)
B(3,0,0,AIR)
B(3,4,0,GRASS)
B(3,3,0,CONCRETE:15)
B(3,2,0,AIR)
B(3,1,0,AIR)
B(-1,6,-2,LONG_GRASS:1)
B(-1,5,-2,GRASS)
B(-1,4,-2,CONCRETE:15)
B(-1,3,-2,CONCRETE:15)
B(3,4,1,GRASS)
B(-1,2,-2,CONCRETE:15)
B(2,1,2,AIR)
B(2,3,2,AIR)
B(2,2,2,AIR)
B(-1,9,-2,Leaves:7)
B(-1,8,-2,Leaves:7)
B(-3,2,-1,AIR)
B(-3,3,-1,CONCRETE:15)
B(-3,4,-1,GRASS)
B(-3,8,-1,Leaves:7)
B(-3,9,-1,Leaves:7)
B(0,10,-1,Leaves:7)
B(0,11,-1,Leaves:7)
B(0,1,0,CONCRETE:15)
B(0,0,0,CONCRETE:15)
B(0,3,0,CONCRETE:15)
B(0,2,0,CONCRETE:15)
B(0,5,0,CONCRETE:15)
B(0,4,0,CONCRETE:15)
B(0,6,0,GRASS)
B(-2,10,0,Leaves:7)
B(1,8,-2,Leaves:7)
B(1,9,-2,Leaves:7)
B(1,4,-2,GRASS)
B(1,3,-2,CONCRETE:15)
B(-4,8,-1,AIR)
B(-1,3,2,AIR)
B(-4,7,-1,AIR)
B(-1,2,2,AIR)
B(-1,5,2,AIR)
B(-1,4,2,GRASS)
B(-4,9,-1,AIR)
B(-4,4,-1,GRASS)
B(-4,6,-1,AIR)
B(-4,5,-1,AIR)
B(-2,9,0,Leaves:7)
B(-2,8,0,Leaves:7)
B(-2,6,0,LONG_GRASS:1)
B(-2,5,0,GRASS)
B(-2,4,0,CONCRETE:15)
B(-2,3,0,CONCRETE:15)
B(-2,2,0,CONCRETE:15)
B(-2,1,0,CONCRETE:15)
B(4,4,0,GRASS)
B(2,5,-1,AIR)
B(2,4,-1,GRASS)
B(2,3,-1,CONCRETE:15)
B(0,8,1,Leaves:7)
B(2,9,-1,AIR)
B(2,8,-1,AIR)
B(2,7,-1,AIR)
B(0,9,1,Leaves:7)
B(-1,10,0,Leaves:7)
B(2,6,-1,AIR)
B(-1,11,0,Leaves:7)
B(-1,1,2,AIR)
B(1,9,-1,Leaves:7)
B(1,8,-1,Leaves:7)
B(1,5,-1,GRASS)
B(1,3,-1,CONCRETE:15)
B(1,4,-1,CONCRETE:15)
B(1,2,-1,CONCRETE:15)
B(-1,4,-4,GRASS)
B(-1,4,1,CONCRETE:15)
B(-1,3,1,CONCRETE:15)
B(-1,6,1,LONG_GRASS:1)
B(-1,5,1,GRASS)
B(-1,8,1,Leaves:7)
B(-1,9,1,Leaves:7)
B(-1,9,-4,AIR)
B(-1,8,-4,AIR)
B(-1,7,-4,AIR)
B(-1,6,-4,AIR)
B(-1,5,-4,AIR)
B(2,4,-2,AIR)
B(0,9,0,Leaves:7)
B(2,8,-2,AIR)
B(0,8,0,Leaves:7)
B(2,7,-2,AIR)
B(2,6,-2,AIR)
B(2,5,-2,AIR)
B(-1,2,1,CONCRETE:15)
B(-1,1,1,CONCRETE:15)
B(0,1,2,CONCRETE:15)
B(0,4,-4,GRASS)
B(0,3,-4,AIR)
B(0,3,2,CONCRETE:15)
B(0,6,-4,AIR)
B(0,2,2,CONCRETE:15)
B(1,9,0,Leaves:7)
B(0,5,-4,AIR)
B(0,5,2,GRASS)
B(1,8,0,Leaves:7)
B(0,8,-4,AIR)
B(0,4,2,CONCRETE:15)
B(0,7,-4,AIR)
B(-2,9,-3,Leaves:7)
B(-2,8,-3,Leaves:7)
B(-3,9,0,Leaves:7)
B(-3,8,0,Leaves:7)
B(-3,3,0,CONCRETE:15)
B(-3,2,0,CONCRETE:15)
B(-2,4,-3,GRASS)
B(-3,5,0,GRASS)
B(-3,4,0,CONCRETE:15)
B(-4,4,-3,GRASS)
B(-1,10,-2,Leaves:7)
B(-1,11,-2,Leaves:7)
B(0,5,3,AIR)
B(0,0,1,CONCRETE:15)
B(0,2,1,CONCRETE:15)
B(0,1,1,CONCRETE:15)
B(0,4,1,CONCRETE:15)
B(1,9,1,Leaves:7)
B(0,3,1,CONCRETE:15)
B(1,8,1,AIR)
B(1,7,1,AIR)
B(0,5,1,GRASS)
B(1,6,1,AIR)
B(-2,10,-1,Leaves:7)
B(-1,10,-1,LOG:3)
B(-2,11,-1,Leaves:7)
B(-2,6,-4,AIR)
B(-2,7,-4,AIR)
B(-2,8,-4,AIR)
B(-2,9,-4,AIR)
B(-2,4,-4,GRASS)
B(-2,5,-4,AIR)
B(-4,3,-2,AIR)
B(-4,2,-2,AIR)
B(-4,4,-2,GRASS)
B(-2,9,1,Leaves:7)
B(-2,8,1,Leaves:7)
B(-1,11,-1,Leaves:7)
B(-2,4,1,GRASS)
B(-2,3,1,CONCRETE:15)
B(1,6,0,GRASS)
B(1,5,0,CONCRETE:15)
B(1,4,0,CONCRETE:15)
B(-4,1,-2,AIR)
B(1,3,0,CONCRETE:15)
B(1,2,0,CONCRETE:15)
B(0,10,0,Leaves:7)
B(1,1,0,CONCRETE:15)
B(0,4,-2,CONCRETE:15)
B(0,3,-2,CONCRETE:15)
B(0,5,-2,GRASS)
B(0,8,-2,Leaves:7)
B(0,9,-2,Leaves:7)
B(-4,4,0,GRASS)
B(-4,3,0,CONCRETE:15)
B(-2,10,-2,Leaves:7)
B(-4,8,0,AIR)
B(3,3,-1,AIR)
B(-4,7,0,AIR)
B(3,4,-1,AIR)
B(0,2,-2,CONCRETE:15)
B(-4,6,0,AIR)
B(-4,5,0,AIR)
B(-1,10,-3,AIR)
B(-2,9,-1,Leaves:7)
B(-1,11,-3,AIR)
B(-2,4,-1,CONCRETE:15)
B(-2,3,-1,CONCRETE:15)
B(-2,2,-1,CONCRETE:15)
B(-2,8,-1,Leaves:7)
B(-2,7,-1,AIR)
B(-2,5,-1,GRASS)
B(-1,7,-1,LOG:3)
B(-1,6,-1,LOG:3)
B(-1,5,-1,DIRT)
B(-1,4,-1,CONCRETE:15)
B(-1,3,-1,CONCRETE:15)
B(-1,2,-1,CONCRETE:15)
B(-1,1,-1,CONCRETE:15)
B(-1,9,-1,LOG:3)
B(-1,8,-1,LOG:3)
B(-3,4,-4,GRASS)
B(1,5,1,GRASS)
B(1,4,1,CONCRETE:15)
B(-3,10,-1,AIR)
B(1,3,1,CONCRETE:15)
B(-3,11,-1,AIR)
B(1,2,1,CONCRETE:15)
B(1,1,1,CONCRETE:15)
B(0,3,-3,CONCRETE:15)
B(0,5,-3,GRASS)
B(0,4,-3,CONCRETE:15)
B(0,2,3,CONCRETE:15)
B(0,4,3,GRASS)
B(0,9,-3,Leaves:7)
B(0,3,3,CONCRETE:15)
B(0,8,-3,Leaves:7)
B(-2,9,-2,Leaves:7)
B(-2,8,-2,Leaves:7)
B(-3,9,1,AIR)
B(-2,3,-2,CONCRETE:15)
B(-3,6,1,AIR)
B(-3,5,1,AIR)
B(0,11,-2,AIR)
B(-3,8,1,AIR)
B(0,10,-2,AIR)
B(-3,7,1,AIR)
B(-3,2,1,AIR)
B(-3,1,1,AIR)
B(-3,4,1,AIR)
B(-2,4,-2,GRASS)
B(-3,3,1,AIR)
B(2,3,0,CONCRETE:15)
B(2,2,0,CONCRETE:15)
B(2,5,0,GRASS)
B(2,4,0,CONCRETE:15)
B(-3,4,-3,GRASS)
B(1,4,2,GRASS)
B(1,3,2,CONCRETE:15)
B(-3,9,-3,Leaves:7)
B(1,2,2,CONCRETE:15)
B(1,1,2,AIR)

#
# +-----------------------------------------------------------------+ #
# |                            BO3 checks                           | #
# +-----------------------------------------------------------------+ #
#

# Require a condition at a certain location in order for the BO3 to be spawned.
# BlockCheck(x,y,z,BlockName[,BlockName[,...]]) - one of the blocks must be at the location
# BlockCheckNot(x,y,z,BlockName[,BlockName[,...]]) - all the blocks must not be at the location
# LightCheck(x,y,z,minLightLevel,maxLightLevel) - light must be between min and max (inclusive)

# You can use "Solid" as a BlockName for matching all solid blocks or "All" to match all blocks that aren't ,AIR).

# Examples:
#   BlockCheck(0,-1,0,GRASS,DIRT)  Require grass or dirt just below the object
#   BlockCheck(0,-1,0,Solid)       Require any solid block just below the object
#   BlockCheck(0,-1,0,CONCRETE:15)        Require any type of wool just below the object
#   BlockCheck(0,-1,0,WOOL:0)      Require white wool just below the object
#   BlockCheckNot(0,0,0,WOOL:0)   Require that there is no white wool below the object
#   LightCheck(0,0,0,0,1)          Require almost complete darkness just below the object

#
# +-----------------------------------------------------------------+ #
# |                             Branches                            | #
# +-----------------------------------------------------------------+ #
#

# Branches are objects that will spawn when this object spawns when it is used in
# the CustomStructure resource. Branches can also have branches, making complex
# structures possible. See the wiki for more details.

# Regular Branches spawn each branch with an independent chance of spawning.
# Branch(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][IndividualChance])
# branchName - name of the object to spawn.
# rotation - NORTH, SOUTH, EAST or WEST.
# IndividualChance - The chance each branch has to spawn, assumed to be 100 when left blank

# Weighted Branches spawn branches with a dependent chance of spawning.
# WBR(x,y,z,branchName,rotation,chance[,anotherBranchName,rotation,chance[,...]][MaxChanceOutOf])
# MaxChanceOutOf - The chance all branches have to spawn out of, assumed to be 100 when left blank
